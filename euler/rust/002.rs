/*
https://projecteuler.net/problem=2

Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms
will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do
not exceed four million, find the sum of the even-valued terms.
*/

// Copied from https://doc.rust-lang.org/stable/rust-by-example/trait/iter.html

struct Fibonacci {
    curr: u32,
    next: u32,
    max: u32,
}

impl Iterator for Fibonacci {
    type Item = u32;

    // Here, we define the sequence using `.curr` and `.next`.
    // The return type is `Option<T>`:
    //      * When the `Iterator` is finished, `None` is returned.
    //      * Otherwise, the next value is wrapped in `Some` and returned.

    fn next(&mut self) -> Option<u32> {
        let new_next = self.curr + self.next;

        self.curr = self.next;
        self.next = new_next;

        // Since there's no endpoint, the `Iterator` will never return `None`.
        if self.curr > self.max {
            return None;
        }
        else {
            return Some(self.curr);
        }
    }
}

fn fibonacci() -> Fibonacci {
    Fibonacci { curr: 0, next: 1, max: 4_000_000 }
}

fn main() {
    let seq = fibonacci();

    let sum: u32 = seq
        .filter(|x| x % 2 == 0 )
        .sum();

    println!("{:?}", sum);
}
